package CHotelServerInterface;


/**
* CHotelServerInterface/CIHotelServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CHotelServerInterface.idl
* Sunday, December 6, 2015 9:58:24 PM EST
*/

public abstract class CIHotelServerPOA extends org.omg.PortableServer.Servant
 implements CHotelServerInterface.CIHotelServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getProfile", new java.lang.Integer (0));
    _methods.put ("reserveHotel", new java.lang.Integer (1));
    _methods.put ("cancelHotel", new java.lang.Integer (2));
    _methods.put ("checkAvailability", new java.lang.Integer (3));
    _methods.put ("getManagerObject", new java.lang.Integer (4));
    _methods.put ("transferReservation", new java.lang.Integer (5));
    _methods.put ("addQuerySockets", new java.lang.Integer (6));
    _methods.put ("deleteQuerySockets", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // CHotelServerInterface/CIHotelServer/getProfile
       {
         CHotelServerInterface.CHotelProfileHolder profile = new CHotelServerInterface.CHotelProfileHolder ();
         int $result = (int)0;
         $result = this.getProfile (profile);
         out = $rh.createReply();
         out.write_long ($result);
         CHotelServerInterface.CHotelProfileHelper.write (out, profile.value);
         break;
       }

       case 1:  // CHotelServerInterface/CIHotelServer/reserveHotel
       {
         String guestID = in.read_string ();
         CHotelServerInterface.CRoomType roomType = CHotelServerInterface.CRoomTypeHelper.read (in);
         CHotelServerInterface.CDate checkInDate = CHotelServerInterface.CDateHelper.read (in);
         CHotelServerInterface.CDate checkOutDate = CHotelServerInterface.CDateHelper.read (in);
         int reservationID = CHotelServerInterface.CReserveIDHelper.read (in);
         int $result = (int)0;
         $result = this.reserveHotel (guestID, roomType, checkInDate, checkOutDate, reservationID);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 2:  // CHotelServerInterface/CIHotelServer/cancelHotel
       {
         String guestID = in.read_string ();
         CHotelServerInterface.CRoomType roomType = CHotelServerInterface.CRoomTypeHelper.read (in);
         CHotelServerInterface.CDate checkInDate = CHotelServerInterface.CDateHelper.read (in);
         CHotelServerInterface.CDate checkOutDate = CHotelServerInterface.CDateHelper.read (in);
         int $result = (int)0;
         $result = this.cancelHotel (guestID, roomType, checkInDate, checkOutDate);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 3:  // CHotelServerInterface/CIHotelServer/checkAvailability
       {
         String guestID = in.read_string ();
         CHotelServerInterface.CRoomType roomType = CHotelServerInterface.CRoomTypeHelper.read (in);
         CHotelServerInterface.CDate checkInDate = CHotelServerInterface.CDateHelper.read (in);
         CHotelServerInterface.CDate checkOutDate = CHotelServerInterface.CDateHelper.read (in);
         CHotelServerInterface.CListAvailabilityHolder listAvail = new CHotelServerInterface.CListAvailabilityHolder ();
         int $result = (int)0;
         $result = this.checkAvailability (guestID, roomType, checkInDate, checkOutDate, listAvail);
         out = $rh.createReply();
         out.write_long ($result);
         CHotelServerInterface.CListAvailabilityHelper.write (out, listAvail.value);
         break;
       }

       case 4:  // CHotelServerInterface/CIHotelServer/getManagerObject
       {
         String manageID = in.read_string ();
         String passCode = in.read_string ();
         CHotelServerInterface.CIHotelServerManagerHolder serverManager = new CHotelServerInterface.CIHotelServerManagerHolder ();
         int $result = (int)0;
         $result = this.getManagerObject (manageID, passCode, serverManager);
         out = $rh.createReply();
         out.write_long ($result);
         CHotelServerInterface.CIHotelServerManagerHelper.write (out, serverManager.value);
         break;
       }

       case 5:  // CHotelServerInterface/CIHotelServer/transferReservation
       {
         String guestID = in.read_string ();
         int reservationID = CHotelServerInterface.CReserveIDHelper.read (in);
         CHotelServerInterface.CRoomType roomType = CHotelServerInterface.CRoomTypeHelper.read (in);
         CHotelServerInterface.CDate checkInDate = CHotelServerInterface.CDateHelper.read (in);
         CHotelServerInterface.CDate checkOutDate = CHotelServerInterface.CDateHelper.read (in);
         String targetHotel = in.read_string ();
         int newResID = CHotelServerInterface.CReserveIDHelper.read (in);
         int $result = (int)0;
         $result = this.transferReservation (guestID, reservationID, roomType, checkInDate, checkOutDate, targetHotel, newResID);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 6:  // CHotelServerInterface/CIHotelServer/addQuerySockets
       {
         CHotelServerInterface.CINetSocketAddress sockets[] = CHotelServerInterface.CListSocketsHelper.read (in);
         int $result = (int)0;
         $result = this.addQuerySockets (sockets);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 7:  // CHotelServerInterface/CIHotelServer/deleteQuerySockets
       {
         CHotelServerInterface.CINetSocketAddress sockets[] = CHotelServerInterface.CListSocketsHelper.read (in);
         int $result = (int)0;
         $result = this.deleteQuerySockets (sockets);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CHotelServerInterface/CIHotelServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public CIHotelServer _this() 
  {
    return CIHotelServerHelper.narrow(
    super._this_object());
  }

  public CIHotelServer _this(org.omg.CORBA.ORB orb) 
  {
    return CIHotelServerHelper.narrow(
    super._this_object(orb));
  }


} // class CIHotelServerPOA
