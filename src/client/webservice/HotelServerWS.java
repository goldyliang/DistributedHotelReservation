
package client.webservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "HotelServerWS", targetNamespace = "http://serverws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface HotelServerWS {


    /**
     * 
     * @return
     *     returns client.webservice.HotelProfile
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getProfile", targetNamespace = "http://serverws/", className = "client.webservice.GetProfile")
    @ResponseWrapper(localName = "getProfileResponse", targetNamespace = "http://serverws/", className = "client.webservice.GetProfileResponse")
    @Action(input = "http://serverws/HotelServerWS/getProfileRequest", output = "http://serverws/HotelServerWS/getProfileResponse")
    public HotelProfile getProfile();

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns client.webservice.GeneralReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "reserveRoom", targetNamespace = "http://serverws/", className = "client.webservice.ReserveRoom")
    @ResponseWrapper(localName = "reserveRoomResponse", targetNamespace = "http://serverws/", className = "client.webservice.ReserveRoomResponse")
    @Action(input = "http://serverws/HotelServerWS/reserveRoomRequest", output = "http://serverws/HotelServerWS/reserveRoomResponse")
    public GeneralReturn reserveRoom(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        RoomType arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        SimpleDate arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        SimpleDate arg3);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns client.webservice.GeneralReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "cancelRoom", targetNamespace = "http://serverws/", className = "client.webservice.CancelRoom")
    @ResponseWrapper(localName = "cancelRoomResponse", targetNamespace = "http://serverws/", className = "client.webservice.CancelRoomResponse")
    @Action(input = "http://serverws/HotelServerWS/cancelRoomRequest", output = "http://serverws/HotelServerWS/cancelRoomResponse")
    public GeneralReturn cancelRoom(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        RoomType arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        SimpleDate arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        SimpleDate arg3);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<client.webservice.Record>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getReserveRecords", targetNamespace = "http://serverws/", className = "client.webservice.GetReserveRecords")
    @ResponseWrapper(localName = "getReserveRecordsResponse", targetNamespace = "http://serverws/", className = "client.webservice.GetReserveRecordsResponse")
    @Action(input = "http://serverws/HotelServerWS/getReserveRecordsRequest", output = "http://serverws/HotelServerWS/getReserveRecordsResponse")
    public List<Record> getReserveRecords(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns client.webservice.ManagerReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getServiceReport", targetNamespace = "http://serverws/", className = "client.webservice.GetServiceReport")
    @ResponseWrapper(localName = "getServiceReportResponse", targetNamespace = "http://serverws/", className = "client.webservice.GetServiceReportResponse")
    @Action(input = "http://serverws/HotelServerWS/getServiceReportRequest", output = "http://serverws/HotelServerWS/getServiceReportResponse")
    public ManagerReturn getServiceReport(
        @WebParam(name = "arg0", targetNamespace = "")
        long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        SimpleDate arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns client.webservice.ManagerReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getStatusReport", targetNamespace = "http://serverws/", className = "client.webservice.GetStatusReport")
    @ResponseWrapper(localName = "getStatusReportResponse", targetNamespace = "http://serverws/", className = "client.webservice.GetStatusReportResponse")
    @Action(input = "http://serverws/HotelServerWS/getStatusReportRequest", output = "http://serverws/HotelServerWS/getStatusReportResponse")
    public ManagerReturn getStatusReport(
        @WebParam(name = "arg0", targetNamespace = "")
        long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        SimpleDate arg1);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<client.webservice.Availability>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkAvailability", targetNamespace = "http://serverws/", className = "client.webservice.CheckAvailability")
    @ResponseWrapper(localName = "checkAvailabilityResponse", targetNamespace = "http://serverws/", className = "client.webservice.CheckAvailabilityResponse")
    @Action(input = "http://serverws/HotelServerWS/checkAvailabilityRequest", output = "http://serverws/HotelServerWS/checkAvailabilityResponse")
    public List<Availability> checkAvailability(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        RoomType arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        SimpleDate arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        SimpleDate arg3);

    /**
     * 
     * @param arg5
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns client.webservice.GeneralReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "transferRoom", targetNamespace = "http://serverws/", className = "client.webservice.TransferRoom")
    @ResponseWrapper(localName = "transferRoomResponse", targetNamespace = "http://serverws/", className = "client.webservice.TransferRoomResponse")
    @Action(input = "http://serverws/HotelServerWS/transferRoomRequest", output = "http://serverws/HotelServerWS/transferRoomResponse")
    public GeneralReturn transferRoom(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        RoomType arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        SimpleDate arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        SimpleDate arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "loginAsManager", targetNamespace = "http://serverws/", className = "client.webservice.LoginAsManager")
    @ResponseWrapper(localName = "loginAsManagerResponse", targetNamespace = "http://serverws/", className = "client.webservice.LoginAsManagerResponse")
    @Action(input = "http://serverws/HotelServerWS/loginAsManagerRequest", output = "http://serverws/HotelServerWS/loginAsManagerResponse")
    public long loginAsManager(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

}
